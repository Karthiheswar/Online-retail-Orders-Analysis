<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/User/Documents/DSBA/SQL/New Orders.db" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><current_tab id="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1745"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="PRODUCT_CLASS"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="ADDRESS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk=""><sort/><column_widths/><filter_values><column index="6" value=""/></filter_values><display_formats/><hidden_columns/><plot_y_axes/></table><table schema="main" name="CARTON" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk=""><sort/><column_widths/><filter_values/><display_formats/><hidden_columns/><plot_y_axes/></table><table schema="main" name="ONLINE_CUSTOMER" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk=""><sort><column index="8" mode="1"/></sort><column_widths><column index="2" value="125"/><column index="3" value="126"/><column index="4" value="176"/><column index="8" value="151"/></column_widths><filter_values/><display_formats/><hidden_columns/><plot_y_axes/></table><table schema="main" name="ORDER_HEADER" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk=""><sort/><column_widths/><filter_values><column index="1" value=""/><column index="2" value=""/></filter_values><display_formats/><hidden_columns/><plot_y_axes/></table><table schema="main" name="ORDER_ITEMS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk=""><sort/><column_widths><column index="3" value="137"/></column_widths><filter_values><column index="1" value=""/><column index="2" value=""/></filter_values><display_formats/><hidden_columns/><plot_y_axes/></table><table schema="main" name="PRODUCT" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk=""><sort/><column_widths><column index="2" value="314"/><column index="3" value="156"/><column index="4" value="111"/><column index="5" value="186"/></column_widths><filter_values><column index="1" value=""/><column index="3" value=""/><column index="5" value=""/></filter_values><display_formats/><hidden_columns/><plot_y_axes/></table><table schema="main" name="PRODUCT_CLASS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk=""><sort/><column_widths><column index="1" value="156"/><column index="2" value="155"/></column_widths><filter_values/><display_formats/><hidden_columns/><plot_y_axes/></table><table schema="main" name="SHIPPER" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk=""><sort/><column_widths/><filter_values/><display_formats/><hidden_columns/><plot_y_axes/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">--Q1

--a. If the category is 2050, increase the price by 2000

UPDATE PRODUCT
SET PRODUCT_PRICE = PRODUCT_PRICE+2000
WHERE PRODUCT_CLASS_CODE = 2050

--b. If the category is 2051, increase the price by 500

UPDATE PRODUCT
SET PRODUCT_PRICE = PRODUCT_PRICE+500
WHERE PRODUCT_CLASS_CODE = 2051

--c. If the category is 2052, increase the price by 600

UPDATE PRODUCT
SET PRODUCT_PRICE = PRODUCT_PRICE+600
WHERE PRODUCT_CLASS_CODE = 2052

--query to Display the product details (product_class_code, product_id, product_desc, product_price,) as per the criteria and sort them in descending order of category

SELECT PRODUCT_CLASS_CODE, PRODUCT_ID, PRODUCT_DESC, PRODUCT_PRICE
FROM PRODUCT
ORDER by PRODUCT_CLASS_CODE DESC

--Q2

-- inventory status of products as per their available quantity

ALTER TABLE PRODUCT ADD COLUMN INVENTORY_STATUS_OF_PRODUCTS VARCHAR(20)

--a. For Electronics and Computer categories, if available quantity is &lt;= 10, show 'Low stock', 11 &lt;= qty &lt;= 30, show 'In stock', &gt;= 31, show 'Enough stock'

UPDATE PRODUCT
SET INVENTORY_STATUS_OF_PRODUCTS = 'Low stock'
WHERE PRODUCT_ID in (221,215,216)

UPDATE PRODUCT
SET INVENTORY_STATUS_OF_PRODUCTS = 'In stock'
WHERE PRODUCT_ID in (201,202,203,250)

--b. For Stationery and Clothes categories, if qty &lt;= 20, show 'Low stock', 21 &lt;= qty &lt;=80, show 'In stock', &gt;= 81, show 'Enough stock'

UPDATE PRODUCT
SET INVENTORY_STATUS_OF_PRODUCTS = 'Low stock'
WHERE PRODUCT_ID in (235,237,238,239, 240, 241)

UPDATE PRODUCT
SET INVENTORY_STATUS_OF_PRODUCTS = 'In stock'
WHERE PRODUCT_ID in (205,219,236)

UPDATE PRODUCT
SET INVENTORY_STATUS_OF_PRODUCTS = 'Enough stock'
WHERE PRODUCT_ID in (209,210,218)

--c. Rest of the categories, if qty &lt;= 15 – 'Low Stock', 16 &lt;= qty &lt;= 50 – 'In Stock', &gt;= 51 – 'Enough stock'

UPDATE PRODUCT
SET INVENTORY_STATUS_OF_PRODUCTS = 'Low stock'
WHERE PRODUCT_ID in (204,208,228,229,230,242,243,244,245,220,231,232,234,222,223,224,225,226,227)

UPDATE PRODUCT
SET INVENTORY_STATUS_OF_PRODUCTS = 'In stock'
WHERE PRODUCT_ID in (206,207,249,213,214,246,247,248,211,212,217,233,99990,99997,99998,99999)

UPDATE PRODUCT
SET INVENTORY_STATUS_OF_PRODUCTS = 'Enough stock'
WHERE PRODUCT_ID in (99994,99995,99996,99991,99992,99993)

--For all categories, if available quantity is 0, show 'Out of stock'

UPDATE PRODUCT
SET INVENTORY_STATUS_OF_PRODUCTS = 'Out of stock'
WHERE PRODUCT_QUANTITY_AVAIL = 0

--query to display (product_class_desc, product_id, product_desc, product_quantity_avail ) and inventory status of products as per their available quantity

SELECT product_class_desc, product_id, product_desc, product_quantity_avail, INVENTORY_STATUS_OF_PRODUCTS
FROM PRODUCT_CLASS
LEFT JOIN PRODUCT
ON PRODUCT.PRODUCT_CLASS_CODE = PRODUCT_CLASS.PRODUCT_CLASS_CODE

--Q3

-- query to Show the count of cities in all countries other than USA &amp; MALAYSIA, with more than 1 city, in the descending order of CITIES

SELECT COUNTRY, count(DISTINCT CITY) FROM ADDRESS
WHERE COUNTRY!=&quot;USA&quot; AND COUNTRY!=&quot;Malaysia&quot;
GROUP BY COUNTRY
HAVING count(DISTINCT CITY)&gt;1
ORDER by count(DISTINCT CITY) DESC

--Q4

-- query to display the customer_id,customer full name ,city,pincode,and order details (order id,order date, product class desc, product desc, subtotal(product_quantity * product_price)) for orders shipped to cities whose pin codes do not have any 0s in them. Sort the output on customer name, order date and subtotal

SELECT oc.CUSTOMER_ID, oc.CUSTOMER_FNAME, oc.CUSTOMER_LNAME, ad.CITY, ad.PINCODE, oi.ORDER_ID, oh.ORDER_DATE, pc.PRODUCT_CLASS_DESC, p.PRODUCT_DESC, (oi.PRODUCT_QUANTITY*p.PRODUCT_PRICE)
FROM ONLINE_CUSTOMER oc
LEFT JOIN ADDRESS ad
ON oc.ADDRESS_ID=ad.ADDRESS_ID
LEFT JOIN ORDER_HEADER oh
ON oh.CUSTOMER_ID=oc.CUSTOMER_ID
LEFT JOIN ORDER_ITEMS oi
ON oi.ORDER_ID=oh.ORDER_ID
LEFT JOIN PRODUCT p
ON p.PRODUCT_ID=oi.PRODUCT_ID
LEFT JOIN PRODUCT_CLASS pc
ON pc.PRODUCT_CLASS_CODE=p.PRODUCT_CLASS_CODE
WHERE PINCODE NOT like '%0%' AND ORDER_STATUS = 'Shipped'
ORDER by oc.CUSTOMER_FNAME, oh.ORDER_DATE, (oi.PRODUCT_QUANTITY*p.PRODUCT_PRICE)


--Q5

--Query to display product id,product description,totalquantity(sum(product quantity) For a given item whose product id is 201 and item been bought along with it maximum no. of times

SELECT PRODUCT_ID, PRODUCT_DESC, &quot;TOTAL_QUANTITY&quot;
FROM
(SELECT p.PRODUCT_ID, p.PRODUCT_DESC, sum(oi.PRODUCT_QUANTITY) as &quot;TOTAL_QUANTITY&quot;
FROM PRODUCT p 
LEFT JOIN ORDER_ITEMS oi
ON p.PRODUCT_ID=oi.PRODUCT_ID
WHERE p.PRODUCT_ID=201
GROUP by PRODUCT_DESC)
ORDER by &quot;TOTAL_QUANTITY&quot; DESC

--Q6

--query to display the customer_id,customer name, email and order details (order id, product desc,product qty, subtotal(product_quantity * product_price)) for all customers even if they have not ordered any item

SELECT oh.CUSTOMER_ID, oc.CUSTOMER_FNAME, oc.CUSTOMER_LNAME, oc.CUSTOMER_EMAIL, oi.ORDER_ID, p.PRODUCT_DESC, oi.PRODUCT_QUANTITY, (oi.PRODUCT_QUANTITY * p.PRODUCT_PRICE)
FROM ONLINE_CUSTOMER oc
LEFT JOIN ORDER_HEADER oh
ON oh.CUSTOMER_ID=oc.CUSTOMER_ID
LEFT JOIN ORDER_ITEMS oi
ON oi.ORDER_ID=oh.ORDER_ID
LEFT JOIN PRODUCT p
ON p.PRODUCT_ID=oi.PRODUCT_ID
LEFT JOIN PRODUCT_CLASS pc
ON pc.PRODUCT_CLASS_CODE=p.PRODUCT_CLASS_CODE</sql><current_tab id="0"/></tab_sql></sqlb_project>
